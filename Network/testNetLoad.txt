Simulating Pressure

There are a lot of options to do these types of "pressure" simulations. On Linux, we can use iptables to accomplish this.
$ iptables -A INPUT -m statistic --mode random --probability 0.1 -j DROP
$ iptables -A OUTPUT -m statistic --mode random --probability 0.1 -j DROP

This will drop incoming and outgoing packets with a 10% probability. Alternatively, we can use tc to simulate network latency, limited bandwidth, and packet loss.
$ tc qdisc add dev eth0 root netem delay 250ms loss 10% rate 1mbps

The above adds an additional 250ms of latency with 10% packet loss and a bandwidth limit of 1Mbps. Likewise, on OSX and BSD we can use ipfw or pfctl.
$ ipfw add 1 pipe 1 ip from me to any
$ ipfw add 2 pipe 1 ip from any to me
$ ipfw pipe 1 config delay 500ms bw 1Mbit/s plr 0.1

Here we inject 500ms of latency while limiting bandwidth to 1Mbps and dropping 10% of packets.

These are just some very simple traffic-shaping examples. Several of these tools allow you to perform even more advanced testing, like adding variation and correlation values. This would allow you to emulate burst packet loss and other situations we often encounter. For instance, with tc, we can add jitter to the network latency.
$ tc qdisc add dev eth0 root netem delay 50ms 20ms

This adds 50Â±20ms of latency. Since network latency typically isn't uniform, we can apply a normal distribution to achieve a more realistic simulation.
$ tc qdisc add dev eth0 root netem delay 50ms 20ms distribution normal

Now we get a nice bell curve which is probably more representative of what we see in practice. We can also use tc to re-order, duplicate, and corrupt packets.
$ tc qdisc add dev eth0 root netem reorder 0.02 duplicate 0.05 corrupt 0.01

https://github.com/tylertreat/Comcast
